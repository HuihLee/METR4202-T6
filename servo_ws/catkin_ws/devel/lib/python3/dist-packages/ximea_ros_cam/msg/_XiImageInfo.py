# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ximea_ros_cam/XiImageInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class XiImageInfo(genpy.Message):
  _md5sum = "1e504126cf849c6656990d903d08e2ea"
  _type = "ximea_ros_cam/XiImageInfo"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
uint32 size
uint32 bp_size
uint32 frm
uint32 width
uint32 height
uint32 nframe
uint32 tsSec
uint32 tsUSec
uint32 GPI_level
uint32 black_level
uint32 padding_x
uint32 AbsoluteOffsetX
uint32 AbsoluteOffsetY
uint32 exposure_time_us
float32 gain_db
uint32 acq_nframe
uint32 image_user_data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','size','bp_size','frm','width','height','nframe','tsSec','tsUSec','GPI_level','black_level','padding_x','AbsoluteOffsetX','AbsoluteOffsetY','exposure_time_us','gain_db','acq_nframe','image_user_data']
  _slot_types = ['std_msgs/Header','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','uint32','float32','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,size,bp_size,frm,width,height,nframe,tsSec,tsUSec,GPI_level,black_level,padding_x,AbsoluteOffsetX,AbsoluteOffsetY,exposure_time_us,gain_db,acq_nframe,image_user_data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(XiImageInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.size is None:
        self.size = 0
      if self.bp_size is None:
        self.bp_size = 0
      if self.frm is None:
        self.frm = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
      if self.nframe is None:
        self.nframe = 0
      if self.tsSec is None:
        self.tsSec = 0
      if self.tsUSec is None:
        self.tsUSec = 0
      if self.GPI_level is None:
        self.GPI_level = 0
      if self.black_level is None:
        self.black_level = 0
      if self.padding_x is None:
        self.padding_x = 0
      if self.AbsoluteOffsetX is None:
        self.AbsoluteOffsetX = 0
      if self.AbsoluteOffsetY is None:
        self.AbsoluteOffsetY = 0
      if self.exposure_time_us is None:
        self.exposure_time_us = 0
      if self.gain_db is None:
        self.gain_db = 0.
      if self.acq_nframe is None:
        self.acq_nframe = 0
      if self.image_user_data is None:
        self.image_user_data = 0
    else:
      self.header = std_msgs.msg.Header()
      self.size = 0
      self.bp_size = 0
      self.frm = 0
      self.width = 0
      self.height = 0
      self.nframe = 0
      self.tsSec = 0
      self.tsUSec = 0
      self.GPI_level = 0
      self.black_level = 0
      self.padding_x = 0
      self.AbsoluteOffsetX = 0
      self.AbsoluteOffsetY = 0
      self.exposure_time_us = 0
      self.gain_db = 0.
      self.acq_nframe = 0
      self.image_user_data = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14If2I().pack(_x.size, _x.bp_size, _x.frm, _x.width, _x.height, _x.nframe, _x.tsSec, _x.tsUSec, _x.GPI_level, _x.black_level, _x.padding_x, _x.AbsoluteOffsetX, _x.AbsoluteOffsetY, _x.exposure_time_us, _x.gain_db, _x.acq_nframe, _x.image_user_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.size, _x.bp_size, _x.frm, _x.width, _x.height, _x.nframe, _x.tsSec, _x.tsUSec, _x.GPI_level, _x.black_level, _x.padding_x, _x.AbsoluteOffsetX, _x.AbsoluteOffsetY, _x.exposure_time_us, _x.gain_db, _x.acq_nframe, _x.image_user_data,) = _get_struct_14If2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14If2I().pack(_x.size, _x.bp_size, _x.frm, _x.width, _x.height, _x.nframe, _x.tsSec, _x.tsUSec, _x.GPI_level, _x.black_level, _x.padding_x, _x.AbsoluteOffsetX, _x.AbsoluteOffsetY, _x.exposure_time_us, _x.gain_db, _x.acq_nframe, _x.image_user_data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.size, _x.bp_size, _x.frm, _x.width, _x.height, _x.nframe, _x.tsSec, _x.tsUSec, _x.GPI_level, _x.black_level, _x.padding_x, _x.AbsoluteOffsetX, _x.AbsoluteOffsetY, _x.exposure_time_us, _x.gain_db, _x.acq_nframe, _x.image_user_data,) = _get_struct_14If2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14If2I = None
def _get_struct_14If2I():
    global _struct_14If2I
    if _struct_14If2I is None:
        _struct_14If2I = struct.Struct("<14If2I")
    return _struct_14If2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
