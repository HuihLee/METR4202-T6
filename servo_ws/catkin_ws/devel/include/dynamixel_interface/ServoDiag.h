// Generated by gencpp from file dynamixel_interface/ServoDiag.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_INTERFACE_MESSAGE_SERVODIAG_H
#define DYNAMIXEL_INTERFACE_MESSAGE_SERVODIAG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_interface
{
template <class ContainerAllocator>
struct ServoDiag_
{
  typedef ServoDiag_<ContainerAllocator> Type;

  ServoDiag_()
    : name()
    , id(0)
    , model_name()
    , error_code(0)
    , voltage(0.0)
    , temperature(0.0)  {
    }
  ServoDiag_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , id(0)
    , model_name(_alloc)
    , error_code(0)
    , voltage(0.0)
    , temperature(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef uint8_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_name_type;
  _model_name_type model_name;

   typedef uint8_t _error_code_type;
  _error_code_type error_code;

   typedef double _voltage_type;
  _voltage_type voltage;

   typedef double _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::dynamixel_interface::ServoDiag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_interface::ServoDiag_<ContainerAllocator> const> ConstPtr;

}; // struct ServoDiag_

typedef ::dynamixel_interface::ServoDiag_<std::allocator<void> > ServoDiag;

typedef boost::shared_ptr< ::dynamixel_interface::ServoDiag > ServoDiagPtr;
typedef boost::shared_ptr< ::dynamixel_interface::ServoDiag const> ServoDiagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_interface::ServoDiag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_interface::ServoDiag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamixel_interface::ServoDiag_<ContainerAllocator1> & lhs, const ::dynamixel_interface::ServoDiag_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.id == rhs.id &&
    lhs.model_name == rhs.model_name &&
    lhs.error_code == rhs.error_code &&
    lhs.voltage == rhs.voltage &&
    lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamixel_interface::ServoDiag_<ContainerAllocator1> & lhs, const ::dynamixel_interface::ServoDiag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamixel_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dynamixel_interface::ServoDiag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_interface::ServoDiag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_interface::ServoDiag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_interface::ServoDiag_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_interface::ServoDiag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_interface::ServoDiag_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_interface::ServoDiag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48b049f9561095b33c05b6a03bd01ae5";
  }

  static const char* value(const ::dynamixel_interface::ServoDiag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48b049f9561095b3ULL;
  static const uint64_t static_value2 = 0x3c05b6a03bd01ae5ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_interface::ServoDiag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_interface/ServoDiag";
  }

  static const char* value(const ::dynamixel_interface::ServoDiag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_interface::ServoDiag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name #name of joint\n"
"uint8 id  #id on bus\n"
"string model_name #model name\n"
"uint8 error_code # error code\n"
"float64 voltage #current voltage\n"
"float64 temperature #current temperature\n"
;
  }

  static const char* value(const ::dynamixel_interface::ServoDiag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_interface::ServoDiag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.id);
      stream.next(m.model_name);
      stream.next(m.error_code);
      stream.next(m.voltage);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoDiag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_interface::ServoDiag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_interface::ServoDiag_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_name);
    s << indent << "error_code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "voltage: ";
    Printer<double>::stream(s, indent + "  ", v.voltage);
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_INTERFACE_MESSAGE_SERVODIAG_H
