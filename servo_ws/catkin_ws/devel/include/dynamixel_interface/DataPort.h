// Generated by gencpp from file dynamixel_interface/DataPort.msg
// DO NOT EDIT!


#ifndef DYNAMIXEL_INTERFACE_MESSAGE_DATAPORT_H
#define DYNAMIXEL_INTERFACE_MESSAGE_DATAPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dynamixel_interface
{
template <class ContainerAllocator>
struct DataPort_
{
  typedef DataPort_<ContainerAllocator> Type;

  DataPort_()
    : name()
    , port_values()  {
    }
  DataPort_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , port_values(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _port_values_type;
  _port_values_type port_values;





  typedef boost::shared_ptr< ::dynamixel_interface::DataPort_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dynamixel_interface::DataPort_<ContainerAllocator> const> ConstPtr;

}; // struct DataPort_

typedef ::dynamixel_interface::DataPort_<std::allocator<void> > DataPort;

typedef boost::shared_ptr< ::dynamixel_interface::DataPort > DataPortPtr;
typedef boost::shared_ptr< ::dynamixel_interface::DataPort const> DataPortConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dynamixel_interface::DataPort_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dynamixel_interface::DataPort_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dynamixel_interface::DataPort_<ContainerAllocator1> & lhs, const ::dynamixel_interface::DataPort_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.port_values == rhs.port_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dynamixel_interface::DataPort_<ContainerAllocator1> & lhs, const ::dynamixel_interface::DataPort_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dynamixel_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dynamixel_interface::DataPort_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dynamixel_interface::DataPort_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_interface::DataPort_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dynamixel_interface::DataPort_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_interface::DataPort_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dynamixel_interface::DataPort_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dynamixel_interface::DataPort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b6c6004f40f6ef774b6478f360fb7d1";
  }

  static const char* value(const ::dynamixel_interface::DataPort_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b6c6004f40f6ef7ULL;
  static const uint64_t static_value2 = 0x74b6478f360fb7d1ULL;
};

template<class ContainerAllocator>
struct DataType< ::dynamixel_interface::DataPort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dynamixel_interface/DataPort";
  }

  static const char* value(const ::dynamixel_interface::DataPort_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dynamixel_interface::DataPort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name #name of joint\n"
"uint16[] port_values #array of port GPIO values [0,1] for digital or [0,4095] for analog\n"
;
  }

  static const char* value(const ::dynamixel_interface::DataPort_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dynamixel_interface::DataPort_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.port_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DataPort_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dynamixel_interface::DataPort_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dynamixel_interface::DataPort_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "port_values[]" << std::endl;
    for (size_t i = 0; i < v.port_values.size(); ++i)
    {
      s << indent << "  port_values[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.port_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DYNAMIXEL_INTERFACE_MESSAGE_DATAPORT_H
