// Generated by gencpp from file control_logic_node/TargetJointStateTrajectory.msg
// DO NOT EDIT!


#ifndef CONTROL_LOGIC_NODE_MESSAGE_TARGETJOINTSTATETRAJECTORY_H
#define CONTROL_LOGIC_NODE_MESSAGE_TARGETJOINTSTATETRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace control_logic_node
{
template <class ContainerAllocator>
struct TargetJointStateTrajectory_
{
  typedef TargetJointStateTrajectory_<ContainerAllocator> Type;

  TargetJointStateTrajectory_()
    : thetasTarget()
    , thetasCurrent()
    , motionDuration(0.0)  {
      thetasTarget.assign(0.0);

      thetasCurrent.assign(0.0);
  }
  TargetJointStateTrajectory_(const ContainerAllocator& _alloc)
    : thetasTarget()
    , thetasCurrent()
    , motionDuration(0.0)  {
  (void)_alloc;
      thetasTarget.assign(0.0);

      thetasCurrent.assign(0.0);
  }



   typedef boost::array<float, 5>  _thetasTarget_type;
  _thetasTarget_type thetasTarget;

   typedef boost::array<float, 5>  _thetasCurrent_type;
  _thetasCurrent_type thetasCurrent;

   typedef float _motionDuration_type;
  _motionDuration_type motionDuration;





  typedef boost::shared_ptr< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct TargetJointStateTrajectory_

typedef ::control_logic_node::TargetJointStateTrajectory_<std::allocator<void> > TargetJointStateTrajectory;

typedef boost::shared_ptr< ::control_logic_node::TargetJointStateTrajectory > TargetJointStateTrajectoryPtr;
typedef boost::shared_ptr< ::control_logic_node::TargetJointStateTrajectory const> TargetJointStateTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator1> & lhs, const ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.thetasTarget == rhs.thetasTarget &&
    lhs.thetasCurrent == rhs.thetasCurrent &&
    lhs.motionDuration == rhs.motionDuration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator1> & lhs, const ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_logic_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4cbd25bd8b636d456c17a3edf6fce06";
  }

  static const char* value(const ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4cbd25bd8b636d4ULL;
  static const uint64_t static_value2 = 0x56c17a3edf6fce06ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_logic_node/TargetJointStateTrajectory";
  }

  static const char* value(const ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[5] thetasTarget\n"
"float32[5] thetasCurrent\n"
"float32 motionDuration\n"
;
  }

  static const char* value(const ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thetasTarget);
      stream.next(m.thetasCurrent);
      stream.next(m.motionDuration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TargetJointStateTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_logic_node::TargetJointStateTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "thetasTarget[]" << std::endl;
    for (size_t i = 0; i < v.thetasTarget.size(); ++i)
    {
      s << indent << "  thetasTarget[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.thetasTarget[i]);
    }
    s << indent << "thetasCurrent[]" << std::endl;
    for (size_t i = 0; i < v.thetasCurrent.size(); ++i)
    {
      s << indent << "  thetasCurrent[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.thetasCurrent[i]);
    }
    s << indent << "motionDuration: ";
    Printer<float>::stream(s, indent + "  ", v.motionDuration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_LOGIC_NODE_MESSAGE_TARGETJOINTSTATETRAJECTORY_H
